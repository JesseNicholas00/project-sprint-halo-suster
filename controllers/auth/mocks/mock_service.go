// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/JesseNicholas00/HaloSuster/services/auth (interfaces: AuthService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/JesseNicholas00/HaloSuster/services/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GetSessionFromToken mocks base method.
func (m *MockAuthService) GetSessionFromToken(arg0 context.Context, arg1 auth.GetSessionFromTokenReq, arg2 *auth.GetSessionFromTokenRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionFromToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSessionFromToken indicates an expected call of GetSessionFromToken.
func (mr *MockAuthServiceMockRecorder) GetSessionFromToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionFromToken", reflect.TypeOf((*MockAuthService)(nil).GetSessionFromToken), arg0, arg1, arg2)
}

// GrantAccessNurse mocks base method.
func (m *MockAuthService) GrantAccessNurse(arg0 context.Context, arg1 auth.GrantAccessNurseReq, arg2 *auth.GrantAccessNurseRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAccessNurse", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantAccessNurse indicates an expected call of GrantAccessNurse.
func (mr *MockAuthServiceMockRecorder) GrantAccessNurse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAccessNurse", reflect.TypeOf((*MockAuthService)(nil).GrantAccessNurse), arg0, arg1, arg2)
}

// Login mocks base method.
func (m *MockAuthService) Login(arg0 context.Context, arg1 auth.LoginReq, arg2 *auth.LoginRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceMockRecorder) Login(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthService)(nil).Login), arg0, arg1, arg2)
}

// RegisterIt mocks base method.
func (m *MockAuthService) RegisterIt(arg0 context.Context, arg1 auth.RegisterItReq, arg2 *auth.RegisterItRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterIt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterIt indicates an expected call of RegisterIt.
func (mr *MockAuthServiceMockRecorder) RegisterIt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterIt", reflect.TypeOf((*MockAuthService)(nil).RegisterIt), arg0, arg1, arg2)
}

// RegisterNurse mocks base method.
func (m *MockAuthService) RegisterNurse(arg0 context.Context, arg1 auth.RegisterNurseReq, arg2 *auth.RegisterNurseRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterNurse", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterNurse indicates an expected call of RegisterNurse.
func (mr *MockAuthServiceMockRecorder) RegisterNurse(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterNurse", reflect.TypeOf((*MockAuthService)(nil).RegisterNurse), arg0, arg1, arg2)
}

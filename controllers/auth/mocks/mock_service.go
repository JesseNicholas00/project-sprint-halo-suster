// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/KerakTelor86/GoBoiler/services/auth (interfaces: AuthService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/KerakTelor86/GoBoiler/services/auth"
	gomock "github.com/golang/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// GetSessionFromToken mocks base method.
func (m *MockAuthService) GetSessionFromToken(arg0 context.Context, arg1 auth.GetSessionFromTokenReq, arg2 *auth.GetSessionFromTokenRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionFromToken", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetSessionFromToken indicates an expected call of GetSessionFromToken.
func (mr *MockAuthServiceMockRecorder) GetSessionFromToken(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionFromToken", reflect.TypeOf((*MockAuthService)(nil).GetSessionFromToken), arg0, arg1, arg2)
}

// LoginStaff mocks base method.
func (m *MockAuthService) LoginStaff(arg0 context.Context, arg1 auth.LoginStaffReq, arg2 *auth.LoginStaffRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginStaff", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginStaff indicates an expected call of LoginStaff.
func (mr *MockAuthServiceMockRecorder) LoginStaff(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginStaff", reflect.TypeOf((*MockAuthService)(nil).LoginStaff), arg0, arg1, arg2)
}

// RegisterStaff mocks base method.
func (m *MockAuthService) RegisterStaff(arg0 context.Context, arg1 auth.RegisterStaffReq, arg2 *auth.RegisterStaffRes) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterStaff", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterStaff indicates an expected call of RegisterStaff.
func (mr *MockAuthServiceMockRecorder) RegisterStaff(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterStaff", reflect.TypeOf((*MockAuthService)(nil).RegisterStaff), arg0, arg1, arg2)
}
